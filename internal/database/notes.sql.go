// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: notes.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const creatNote = `-- name: CreatNote :one
INSERT INTO notes (user_id, title, content)
VALUES ( $1, $2, $3 )
RETURNING id, user_id, title, content, created_at, updated_at
`

type CreatNoteParams struct {
	UserID  pgtype.Int4
	Title   string
	Content string
}

func (q *Queries) CreatNote(ctx context.Context, arg CreatNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, creatNote, arg.UserID, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotesByUserID = `-- name: GetNotesByUserID :many
SELECT id, user_id, title, content, created_at, updated_at FROM notes
WHERE user_id = $1
`

func (q *Queries) GetNotesByUserID(ctx context.Context, userID pgtype.Int4) ([]Note, error) {
	rows, err := q.db.Query(ctx, getNotesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
