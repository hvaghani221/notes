// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: notes.sql

package generated

import (
	"context"
)

const creatNote = `-- name: CreatNote :one
INSERT INTO notes (user_id, title, content)
VALUES ( $1, $2, $3 )
RETURNING id, user_id, title, content, created_at, updated_at
`

type CreatNoteParams struct {
	UserID  int32
	Title   string
	Content string
}

func (q *Queries) CreatNote(ctx context.Context, arg CreatNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, creatNote, arg.UserID, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1 AND user_id = $2
`

type DeleteNoteParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteNote(ctx context.Context, arg DeleteNoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteNote, arg.ID, arg.UserID)
	return err
}

const getNoteByUserID = `-- name: GetNoteByUserID :one
SELECT id, user_id, title, content, created_at, updated_at FROM notes
WHERE id = $1 AND user_id = $2
`

type GetNoteByUserIDParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) GetNoteByUserID(ctx context.Context, arg GetNoteByUserIDParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteByUserID, arg.ID, arg.UserID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNotesByUserID = `-- name: ListNotesByUserID :many
SELECT id, user_id, title, content, created_at, updated_at FROM notes
WHERE user_id = $1
`

func (q *Queries) ListNotesByUserID(ctx context.Context, userID int32) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET title = $2, content = $3, updated_at = now()
WHERE id = $1 AND user_id = $4
RETURNING id, user_id, title, content, created_at, updated_at
`

type UpdateNoteParams struct {
	ID      int32
	Title   string
	Content string
	UserID  int32
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.UserID,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
